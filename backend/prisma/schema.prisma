generator client {
  provider = "prisma-client-js"
  output   = "@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  username String @db.Text

  active Boolean @default(true) @db.Boolean

  created_at DateTime @default(now()) @db.Date

  updated_at      DateTime?       @db.Date
  adm_rooms       Room[]
  rooms           RoomHasUsers[]
  matches         MatchHasUsers[]
  adm_matches     Match[]
  sender_rounds   Round[]         @relation("sender")
  receiver_rounds Round[]         @relation("receiver")

  @@map("users")
}

model Match {
  id String @id @default(uuid()) @db.Uuid

  match_adm_id String @db.Uuid

  room_id String @db.Uuid

  sort String @db.Text

  created_at DateTime @default(now()) @db.Date

  updated_at DateTime? @db.Date

  match_adm User            @relation(fields: [match_adm_id], references: [id])
  room      Room            @relation(fields: [room_id], references: [id])
  users     MatchHasUsers[]
  rounds    Round[]

  @@map("matches")
}

model Round {
  id String @id @default(uuid()) @db.Uuid

  match_id String @db.Uuid

  sender_id String @db.Uuid

  receiver_id String? @db.Uuid

  content String @db.Text

  type RoundType

  created_at DateTime @default(now()) @db.Date

  updated_at DateTime? @db.Date

  match    Match @relation(fields: [match_id], references: [id])
  sender   User  @relation(fields: [sender_id], references: [id], name: "sender")
  receiver User? @relation(fields: [receiver_id], references: [id], name: "receiver")

  @@map("rounds")
}

enum RoundType {
  draw
  phrase
}

model Room {
  id String @id @default(uuid()) @db.Uuid

  room_code String @db.Text

  room_adm_id String @db.Uuid

  active Boolean @default(true) @db.Boolean

  created_at DateTime @default(now()) @db.Date

  updated_at DateTime? @db.Date

  room_adm User           @relation(fields: [room_adm_id], references: [id])
  users    RoomHasUsers[]
  matches  Match[]

  @@map("rooms")
}

model RoomHasUsers {
  room Room @relation(fields: [room_id], references: [id])

  room_id String @db.Uuid

  user User @relation(fields: [user_id], references: [id])

  user_id String @db.Uuid

  active Boolean @default(true) @db.Boolean

  created_at DateTime @default(now()) @db.Date

  updated_at DateTime? @db.Date

  @@id([room_id, user_id])
  @@map("room_has_users")
}

model MatchHasUsers {
  match Match @relation(fields: [match_id], references: [id])

  match_id String @db.Uuid

  user User @relation(fields: [user_id], references: [id])

  user_id String @db.Uuid

  active Boolean @default(true) @db.Boolean

  created_at DateTime @default(now()) @db.Date

  updated_at DateTime? @db.Date

  @@id([match_id, user_id])
  @@map("match_has_users")
}
